class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        res = [0] * n
        prefix = [0] * n
        suffix = [0] * n

        prefix[0] = suffix[n-1] = 1
        for i in range(1, n):
            prefix[i] = nums[i-1] * prefix[i-1]
        for i in range(n-2, -1, -1):
            suffix[i] = suffix[i+1] * nums[i+1]   
        for i in range(n):
            res[i] = prefix[i] * suffix[i]
        return res

            #[1, 2, 3, 4] - nums
            #[1, 1, 2, 6] - prefix

            #prefix[0] = 1
            #prefix[1] = nums[0] * prefix[0] = 1 * 1 = 1
            #prefix[2] = nums[1] * prefix[1] = 1 * 2 = 2
            #prefix[3] = nums[2] * prefix[2] = 3 * 2 = 6

            #[1, 2, 3, 4] - nums
            #[24, 12, 4, 1] - suffix

            #suffix[3] = 1
            #suffix[2] = nums[3] * suffix[3] = 4 * 1 = 4
            #suffix[1] = nums[2] * suffix[2] = 3 * 4 = 12
            #suffix[0] = nums[1] * suffix[1] = 2 * 12 = 24

            # res[i] = prefix[i] * suffix[i] = [24, 12, 8, 6]

# time / space complexity = O(n)

